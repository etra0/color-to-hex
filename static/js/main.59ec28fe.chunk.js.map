{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","palette","primary","purple","secondary","green","type","status","danger","App","useState","r","g","b","a","color","setColor","endianness","setEndianness","format","setFormat","ThemeProvider","className","onChange","c","rgb","style","margin","InputLabel","Select","value","v","target","MenuItem","_color","JSON","parse","stringify","map","reduce","acc","write","toString","slice","join","generate_aob","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,+NCYrCC,G,OAAQC,YAAe,CAC1BC,QAAS,CACLC,QAASC,IACTC,UAAWC,IACbC,KAAM,QAERC,OAAQ,CACJC,OAAQ,aA4DAC,MAxDf,WAAgB,IAAD,EACYC,mBAAS,CAACC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAD3C,mBACPC,EADO,KACAC,EADA,OAEsBN,mBAAS,UAF/B,mBAEPO,EAFO,KAEKC,EAFL,OAGeR,mBAAS,QAHxB,mBAGNS,EAHM,KAGEC,EAHF,KAqBb,OACA,kBAACC,EAAA,EAAD,CAAetB,MAAOA,GACpB,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cACpB,6BACC,kBAAC,eAAD,CACCP,MAAQA,EACRQ,SAAW,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,SAE7B,yBAAKC,MAAO,CAACC,OAAQ,KACpB,kBAACC,EAAA,EAAD,mBACA,kBAACC,EAAA,EAAD,CACCC,MAAOb,EACPM,SAAU,SAAAQ,GAAC,OAAIb,EAAca,EAAEC,OAAOF,SACtC,kBAACG,EAAA,EAAD,CAAUH,MAAM,UAAhB,iBACA,kBAACG,EAAA,EAAD,CAAUH,MAAM,OAAhB,gBAGF,yBAAKJ,MAAO,CAACC,OAAQ,KACpB,kBAACC,EAAA,EAAD,eACA,kBAACC,EAAA,EAAD,CACCC,MAAOX,EACPI,SAAU,SAAAQ,GAAC,OAAIX,EAAUW,EAAEC,OAAOF,SAClC,kBAACG,EAAA,EAAD,CAAUH,MAAM,QAAhB,wBACA,kBAACG,EAAA,EAAD,CAAUH,MAAM,QAAhB,iCAGF,6CACA,2BA5CkB,SAAAf,GACpB,IAAMmB,EAASC,KAAKC,MAAMD,KAAKE,UAAUtB,IAKzC,MAJA,CAAC,IAAK,IAAK,KAAKuB,KAAI,SAAAP,GAAMG,EAAOH,GAAMG,EAAOH,GAAG,OACjDG,EAAOpB,EAAKoB,EAAOpB,GAEM,SAAXK,EAAoB,CAAC,IAAK,IAAK,IAAK,KAAO,CAAC,IAAK,IAAK,IAAK,MAC5DoB,QAAO,SAACC,EAAKT,GACzB,IAAIlB,EAAI,CAAC,EAAG,EAAG,EAAG,GAGlB,OAFA4B,gBAAM5B,EAAGqB,EAAOH,GAAI,EAAkB,WAAfd,EAAyB,GAAI,GAE7CuB,EAAM,KADb3B,EAAIA,EAAEyB,KAAI,SAAAP,GAAC,OAAK,KAAOA,EAAEW,SAAS,KAAKC,OAAO,MAAIC,KAAK,OAGrD,IAgCGC,CAAa9B,QC5DD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59ec28fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport { SketchPicker } from 'react-color';\nimport {write} from 'ieee754';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport './App.css';\n\nconst theme = createMuiTheme({\n\t  palette: {\n\t\t\t    primary: purple,\n\t\t\t    secondary: green,\n\t\t\t\t\ttype: 'dark'\n\t\t\t  },\n\t  status: {\n\t\t\t    danger: 'orange',\n\t\t\t  },\n});\n\nfunction App() {\n\tconst [color, setColor] = useState({r: 0, g: 0, b: 0, a: 1});\n\tconst [endianness, setEndianness] = useState('little')\n  const [format, setFormat] = useState('ARGB')\n\n\tconst generate_aob = color => {\n\t\tconst _color = JSON.parse(JSON.stringify(color));\n\t\t['r', 'g', 'b'].map(v => {_color[v] = (_color[v]/255)});\n\t\t_color.a = (_color.a);\n\n    let order = format === 'ARGB' ? ['a', 'r', 'g', 'b'] : ['r', 'g', 'b', 'a'];\n\t\treturn order.reduce((acc, v) => {\n\t\t\tlet b = [0, 0, 0, 0];\n\t\t\twrite(b, _color[v], 0, endianness === 'little', 23, 4);\n\t\t\tb = b.map(v => (\"00\" + v.toString(16)).slice(-2)).join('');\n\t\t\treturn acc + ' ' + b;\n\n\t\t}, '');\n\n\t}\n\n  return (\n\t\t<ThemeProvider theme={theme}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t\t\t\t<div>\n\t\t\t\t\t<SketchPicker\n\t\t\t\t\t\tcolor={ color }\n\t\t\t\t\t\tonChange={ c => setColor(c.rgb) } />\n\t\t\t\t</div>\n\t\t\t\t<div style={{margin: 20}}>\n\t\t\t\t\t<InputLabel>Endianness</InputLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tvalue={endianness}\n\t\t\t\t\t\tonChange={v => setEndianness(v.target.value)} >\n\t\t\t\t\t\t<MenuItem value='little'>Little-endian</MenuItem>\n\t\t\t\t\t\t<MenuItem value='big'>Big-endian</MenuItem>\n\t\t\t\t\t</Select>\n\t\t\t\t</div>\n\t\t\t\t<div style={{margin: 20}}>\n\t\t\t\t\t<InputLabel>Format</InputLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tvalue={format}\n\t\t\t\t\t\tonChange={v => setFormat(v.target.value)} >\n\t\t\t\t\t\t<MenuItem value='ARGB'>ARGB (Yakuza 0 Pibs)</MenuItem>\n\t\t\t\t\t\t<MenuItem value='RGBI'>RGBI (Yakuza Kiwami 2 Pibs)</MenuItem>\n\t\t\t\t\t</Select>\n\t\t\t\t</div>\n\t\t\t\t<p>Copy the bytes</p>\n\t\t\t\t<p>{generate_aob(color)}</p>\n      </header>\n    </div>\n\t\t</ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}